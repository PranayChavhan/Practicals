Class BinarySearchTree:

    Struct Node:
        integer data
        Node* left
        Node* right

    Node* root

    Node* insertNode(Node* root, integer value):
        If root is NULL:
            Node* newNode = new Node
            newNode->data = value
            newNode->left = NULL
            newNode->right = NULL
            Return newNode
        If value < root->data:
            root->left = insertNode(root->left, value)
        Else:
            root->right = insertNode(root->right, value)
        Return root



    integer findMaxDepth(Node* root):
        If root is NULL:
            Return 0
        integer leftDepth = findMaxDepth(root->left)
        integer rightDepth = findMaxDepth(root->right)
        Return max(leftDepth, rightDepth) + 1



    integer findMinValue(Node* root):
        If root is NULL:
            Return 0
        If root->left is NULL:
            Return root->data
        Return findMinValue(root->left)




    integer findMaxValue(Node* root):
        If root is NULL:
            Return 0
        If root->right is NULL:
            Return root->data
        Return findMaxValue(root->right)



    Void swapLeftRight(Node* root):
        If root is NULL:
            Return
        swapLeftRight(root->left)
        swapLeftRight(root->right)
        Node* temp = root->left
        root->left = root->right
        root->right = temp



    Boolean searchElement(Node* root, integer value):
        If root is NULL:
            Return false
        If root->data = value:
            Return true
        If value < root->data:
            Return searchElement(root->left, value)
        Else:
            Return searchElement(root->right, value)





    Node* deleteNode(Node* root, integer value):
        If root is NULL:
            Return NULL
        If value < root->data:
            root->left = deleteNode(root->left, value)
        Else If value > root->data:
            root->right = deleteNode(root->right, value)
        Else:
            If root->left is NULL AND root->right is NULL:
                // Case 1: leaf node
                Delete root
                root = NULL
            Else If root->left is NULL:
                // Case 2: node with one child (right child)
                Node* temp = root
                root = root->right
                Delete temp
            Else If root->right is NULL:
                // Case 2: node with one child (left child)
                Node* temp = root
                root = root->left
                Delete temp
            Else:
                // Case 3: node with two children
                Node* temp = findMinNode(root->right)
                root->data = temp->data
                root->right = deleteNode(root->right, temp->data)
        Return root





    Node* findMinNode(Node* root):
        While root->left is not NULL:
            root = root->left
        Return root












        
    Public BinarySearchTree():
        root = NULL
    Void insert(integer value):
        root = insertNode(root, value)
    Integer getMaxDepth():
        Return findMaxDepth(root)
    Integer getMinValue():
        Return findMinValue(root)
    Integer getMaxValue():
        Return findMaxValue(root)
    Void swapLeftRight():
        swapLeftRight(root)
    Boolean search(integer value):
        Return searchElement(root, value)
    Void remove(integer value):
        deleteNode(root, value
